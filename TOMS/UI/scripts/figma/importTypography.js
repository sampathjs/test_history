require('dotenv').config();

const fs = require('fs');
const path = require('path');
const prettier = require('prettier');
const { setWith } = require('lodash');
const { assert } = require('console');
const { extractStyles, getStylePath, request } = require('./helpers');

const OUTPUT_FILE = path.join(
  __dirname,
  '../../src/styles/theme/typography.ts'
);
const FILE_ID = process.env.FIGMA_FILE_KEY;
const NODE_ID = process.env.FIGMA_FILE_NODE_ID;
const VALID_CSS_PROPERTIES = [
  'fontFamily',
  'fontWeight',
  'fontSize',
  'lineHeight',
  'letterSpacing',
];

assert(FILE_ID, 'Figma file ID not found');
assert(NODE_ID, 'Figma file node IDs not found');

const typography = {};

function parseStyles(style, validCSSProperties) {
  return Object.fromEntries(
    Object.entries(style)
      .map(([prop, value]) => {
        switch (prop) {
          case 'fontSize':
            return [prop, `${value}px`];
          case 'lineHeightPx':
            return ['lineHeight', `${value}px`];
          default:
            return [prop, value];
        }
      })
      .filter(([prop]) => validCSSProperties.includes(prop))
  );
}

function extractText(child, fileStyles) {
  const styleId = child.styles.text;
  const style = fileStyles[styleId];
  if (!style) {
    return;
  }
  const text = child.style;
  if (text) {
    setWith(
      typography,
      getStylePath(style),
      parseStyles(text, VALID_CSS_PROPERTIES),
      Object
    );
  }
}

async function start() {
  const res = await request(
    `files/${FILE_ID}/nodes?ids=${encodeURIComponent(NODE_ID)}`
  );
  const { document, styles } = res.nodes[decodeURIComponent(NODE_ID)];

  extractStyles(document, styles, 'text', extractText);

  const output = `  /**
 These styles are automatically imported from Figma
 Do not edit this file directly.
**/

  export const typography = ${JSON.stringify(typography, null, 2)}
  `;
  prettier
    .resolveConfig(fs.readFileSync('.prettierrc', 'utf8'))
    .then((config) => {
      fs.writeFileSync(
        OUTPUT_FILE,
        prettier.format(output, { ...config, parser: 'babel' }),
        'utf-8'
      );
    });
}

start()
  .catch(console.error)
  .then(() => {
    console.log('Styles imported successfully');
  });
